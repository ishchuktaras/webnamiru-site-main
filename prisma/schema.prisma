// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String    @unique
  image     String?
  createdAt DateTime  @default(now())
  posts     Post[]
  comments  Comment[]
}

model Category {
  id    String @id @default(cuid())
  slug  String @unique
  name  String
  color String @default("gray")
  posts Post[]
}

model Post {
  id              String    @id @default(cuid())
  slug            String    @unique
  title           String
  excerpt         String
  content         String    @db.Text
  imageUrl        String?
  published       Boolean   @default(false)
  featured        Boolean   @default(false)
  readingTime     Int       @default(5)
  seoTitle        String?
  seoDescription  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  tags            String[]
  author          User      @relation(fields: [authorId], references: [id])
  authorId        String
  category        Category? @relation(fields: [categoryId], references: [id])
  categoryId      String?
  comments        Comment[]
  ratings         Rating[]
  views           BlogView[]
}

model Comment {
  id           String   @id @default(uuid())
  originalAuthor    String
  originalEmail     String
  content      String
  approved     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  post         Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       String
  authorUser   User?    @relation(fields: [authorUserId], references: [id])
  authorUserId String?
  @@index([postId])
  @@index([approved])
}

model Rating {
  id        String   @id @default(uuid())
  value     Int
  ipAddress String?
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  @@index([postId])
  @@unique([postId, ipAddress])
}

model BlogView {
  id        String   @id @default(uuid())
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  @@index([postId])
  @@index([createdAt])
}

model Newsletter {
  id          String   @id @default(uuid())
  email       String   @unique
  name        String?
  active      Boolean  @default(true)
  source      String?
  preferences Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@index([active])
  @@index([createdAt])
}

model ContactSubmission {
  id              String   @id @default(uuid())
  name            String
  email           String
  phone           String?
  message         String
  inquiryType     String?
  servicePackage  String?
  partnerType     String?
  budget          String?
  timeline        String?
  businessType    String?
  location        String?
  source          String?
  status          String   @default("new")
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  @@index([status])
  @@index([inquiryType])
  @@index([createdAt])
}

model Setting {
  id    String @id @default(cuid())
  key   String @unique // Unikátní klíč, např. "metaTitle"
  value String @db.Text // Hodnota nastavení
}